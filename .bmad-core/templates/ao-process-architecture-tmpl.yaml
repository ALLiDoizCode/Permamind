template:
  id: ao-process-architecture-v1
  name: AO Process Architecture Document
  version: 1.0
  output:
    format: markdown
    filename: docs/ao-process-architecture.md
    title: "{{project_name}} AO Process Architecture"

workflow:
  mode: interactive
  elicitation: advanced-elicitation

sections:
  - id: introduction
    title: Introduction
    instruction: |
      Create comprehensive technical architecture documentation for the AO process based on business requirements.
    sections:
      - id: intro-content
        content: |
          This document defines the technical architecture for {{project_name}}, an AO (Autonomous Objects) process designed to meet the business requirements outlined in the AO Process Requirements document.
          
          **Document Purpose:**
          - Define technical architecture and design patterns
          - Specify AO handler organization and message flows
          - Design data structures and state management
          - Plan integration with AO ecosystem and Permaweb
          - Provide implementation specifications for developer
      - id: requirements-reference
        title: Requirements Reference
        instruction: |
          Reference the business requirements document and confirm all requirements are addressed in this architecture.
        template: |
          **Source Requirements:** {{requirements_document_reference}}
          **Business Requirements Addressed:** {{requirements_coverage_summary}}
          **Key Architectural Drivers:** {{primary_architectural_requirements}}
      - id: changelog
        title: Change Log
        type: table
        columns: [Date, Version, Description, Author]
        instruction: Track document versions and changes

  - id: architecture-overview
    title: Architecture Overview
    instruction: |
      Provide high-level technical architecture overview.
    elicit: true
    sections:
      - id: technical-summary
        title: Technical Summary
        instruction: |
          Provide a comprehensive technical overview:
          
          1. Overall AO process architecture pattern
          2. Key technical components and their relationships
          3. Primary technology choices and AO modules
          4. Core architectural patterns and design principles
          5. How this architecture addresses business requirements
        template: |
          **Architecture Pattern:** {{architecture_pattern}}
          
          **Core Components:** {{component_overview}}
          
          **AO Module Selection:** {{ao_modules_used}}
          
          **Design Principles:** {{design_principles}}
          
          **Requirements Alignment:** {{business_requirements_mapping}}

      - id: process-diagram
        title: AO Process Architecture Diagram
        type: mermaid
        mermaid_type: graph
        instruction: |
          Create a Mermaid diagram showing the AO process architecture:
          - Handler organization and message routing
          - State management components
          - External integrations (other processes, Permaweb)
          - Data flow patterns
          - Security boundaries

  - id: handler-architecture
    title: Handler Architecture
    instruction: |
      Design the AO process handler organization and message processing patterns.
    elicit: true
    sections:
      - id: handler-organization
        title: Handler Organization
        instruction: |
          Design how handlers are organized within the process:
          
          1. What handler categories are needed based on business requirements?
          2. How should handlers be grouped and organized?
          3. What common patterns or utilities will handlers share?
          4. How will handler code be structured for maintainability?
        template: |
          **Handler Categories:**
          - {{handler_category_1}}: {{category_purpose_1}}
          - {{handler_category_2}}: {{category_purpose_2}}
          - {{handler_category_3}}: {{category_purpose_3}}
          
          **Organization Pattern:** {{handler_organization_pattern}}
          
          **Shared Utilities:** {{common_handler_utilities}}
          
          **Code Structure:** {{handler_code_organization}}

      - id: message-routing
        title: Message Routing Architecture
        instruction: |
          Design how messages are routed to appropriate handlers:
          
          1. What message routing patterns will be used?
          2. How are different message types identified and routed?
          3. What validation occurs before handler execution?
          4. How are errors and invalid messages handled?
        template: |
          **Routing Pattern:** {{message_routing_approach}}
          
          **Message Identification:** {{message_type_detection}}
          
          **Validation Strategy:** {{message_validation_approach}}
          
          **Error Handling:** {{routing_error_management}}

      - id: handler-specifications
        title: Handler Specifications
        instruction: |
          Define each handler based on business requirements and user stories.
        repeatable: true
        sections:
          - id: handler
            title: "{{handler_name}}"
            template: |
              **Purpose:** {{handler_business_purpose}}
              
              **Triggers:** {{message_triggers}}
              
              **Input Schema:**
              ```json
              {{input_message_schema}}
              ```
              
              **Processing Logic:** {{handler_logic_description}}
              
              **State Changes:** {{state_modifications}}
              
              **Output/Response:** {{response_format}}
              
              **Error Conditions:** {{error_scenarios}}
              
              **Security Considerations:** {{security_requirements}}

  - id: state-management
    title: State Management Architecture
    instruction: |
      Design how the AO process manages and organizes its state.
    elicit: true
    sections:
      - id: state-structure
        title: State Structure Design
        instruction: |
          Design the process state organization:
          
          1. How should state be structured based on business requirements?
          2. What are the main state categories or domains?
          3. How is state accessed and modified by handlers?
          4. What state validation and consistency rules apply?
        template: |
          **State Organization Pattern:** {{state_structure_approach}}
          
          **State Categories:**
          - {{state_category_1}}: {{category_description_1}}
          - {{state_category_2}}: {{category_description_2}}
          - {{state_category_3}}: {{category_description_3}}
          
          **Access Patterns:** {{state_access_methods}}
          
          **Validation Rules:** {{state_consistency_rules}}

      - id: data-schemas
        title: Data Schemas
        instruction: |
          Define the data structures for process state based on business requirements.
        repeatable: true
        sections:
          - id: schema
            title: "{{schema_name}}"
            type: code
            language: json
            template: |
              // {{schema_purpose}}
              {{json_schema_definition}}

      - id: state-transitions
        title: State Transition Architecture
        instruction: |
          Design how state changes occur and are managed:
          
          1. What state transition patterns are used?
          2. How are state changes validated and applied?
          3. What rollback or error recovery mechanisms exist?
          4. How is state consistency maintained across concurrent operations?
        template: |
          **Transition Pattern:** {{state_transition_approach}}
          
          **Validation Strategy:** {{state_change_validation}}
          
          **Error Recovery:** {{state_rollback_mechanism}}
          
          **Concurrency Control:** {{concurrent_state_management}}

  - id: message-architecture
    title: Message Architecture
    instruction: |
      Design the message formats and communication patterns.
    elicit: true
    sections:
      - id: message-schemas
        title: Message Schemas
        instruction: |
          Define message formats for all process interactions based on business requirements.
        repeatable: true
        sections:
          - id: message-type
            title: "{{message_type_name}}"
            template: |
              **Purpose:** {{message_business_purpose}}
              
              **Trigger Conditions:** {{when_message_sent}}
              
              **Schema:**
              ```json
              {{message_json_schema}}
              ```
              
              **Validation Rules:** {{message_validation_requirements}}
              
              **Response Format:** {{expected_response}}

      - id: communication-patterns
        title: Inter-Process Communication Patterns
        instruction: |
          Design communication with other AO processes and external systems:
          
          1. What communication patterns are needed for required integrations?
          2. How are external process messages formatted and handled?
          3. What error handling and retry logic is needed?
          4. How is message ordering and sequencing managed?
        template: |
          **Communication Patterns Used:** {{communication_patterns}}
          
          **External Message Handling:** {{external_message_processing}}
          
          **Error Handling Strategy:** {{communication_error_management}}
          
          **Message Ordering:** {{sequencing_requirements}}

  - id: security-architecture
    title: Security Architecture
    instruction: |
      Design security measures and access control based on business risk requirements.
    elicit: true
    sections:
      - id: access-control
        title: Access Control Architecture
        instruction: |
          Design access control and authorization:
          
          1. What access control mechanisms are needed?
          2. How are different user roles and permissions managed?
          3. What authentication and authorization patterns apply?
          4. How are administrative privileges controlled?
        template: |
          **Access Control Model:** {{access_control_approach}}
          
          **Role Definition:** {{user_roles_and_permissions}}
          
          **Authentication:** {{auth_mechanisms}}
          
          **Authorization:** {{permission_validation}}

      - id: input-validation
        title: Input Validation Architecture
        instruction: |
          Design comprehensive input validation and sanitization:
          
          1. What validation rules apply to each message type?
          2. How are malicious inputs detected and handled?
          3. What sanitization processes are applied?
          4. How are validation failures reported and logged?
        template: |
          **Validation Strategy:** {{input_validation_approach}}
          
          **Sanitization Rules:** {{input_sanitization}}
          
          **Malicious Input Detection:** {{security_threat_detection}}
          
          **Failure Handling:** {{validation_error_management}}

      - id: security-controls
        title: Security Controls
        instruction: |
          Define additional security measures based on business risk analysis:
          
          1. What rate limiting or abuse prevention is needed?
          2. How are sensitive operations protected?
          3. What audit logging is required?
          4. How are security incidents detected and responded to?
        template: |
          **Rate Limiting:** {{rate_limit_strategy}}
          
          **Sensitive Operation Protection:** {{high_risk_operation_security}}
          
          **Audit Logging:** {{security_audit_requirements}}
          
          **Incident Response:** {{security_incident_handling}}

  - id: integration-architecture
    title: Integration Architecture
    instruction: |
      Design integration with AO ecosystem and Permaweb based on business requirements.
    elicit: true
    sections:
      - id: ao-ecosystem-integration
        title: AO Ecosystem Integration
        instruction: |
          Design integration with other AO processes and infrastructure:
          
          1. How does this process discover and communicate with other AO processes?
          2. What shared AO infrastructure components are used?
          3. How are process dependencies managed and versioned?
          4. What monitoring and observability integration is needed?
        repeatable: true
        template: |
          **Integration Target:** {{target_ao_component}}
          **Integration Pattern:** {{integration_approach}}
          **Message Protocols:** {{communication_protocols}}
          **Dependency Management:** {{dependency_handling}}
          **Error Handling:** {{integration_error_management}}

      - id: permaweb-integration
        title: Permaweb Integration Architecture
        instruction: |
          Design integration with Permaweb infrastructure:
          
          1. How is the process deployed and made discoverable on Permaweb?
          2. What Arweave storage patterns are used?
          3. How are updates and versioning handled?
          4. What off-chain integration points exist?
        template: |
          **Deployment Strategy:** {{permaweb_deployment_approach}}
          
          **Storage Architecture:** {{arweave_storage_patterns}}
          
          **Versioning Strategy:** {{process_versioning_approach}}
          
          **Off-Chain Integration:** {{external_system_integration}}

  - id: performance-architecture
    title: Performance Architecture
    instruction: |
      Design for performance requirements identified in business requirements.
    elicit: true
    sections:
      - id: scalability-design
        title: Scalability Architecture
        instruction: |
          Design for scale based on business growth projections:
          
          1. How does the process handle increasing message volume?
          2. What optimization strategies are employed for performance?
          3. How is resource usage monitored and managed?
          4. What bottlenecks are anticipated and how are they addressed?
        template: |
          **Scaling Strategy:** {{scalability_approach}}
          
          **Performance Optimizations:** {{performance_optimizations}}
          
          **Resource Management:** {{resource_monitoring_strategy}}
          
          **Bottleneck Mitigation:** {{performance_bottleneck_solutions}}

      - id: caching-strategy
        title: Caching and Optimization
        instruction: |
          Design caching and optimization strategies:
          
          1. What data or computations should be cached?
          2. What caching patterns and invalidation strategies are used?
          3. How are expensive operations optimized?
          4. What trade-offs exist between performance and resource usage?
        template: |
          **Caching Strategy:** {{caching_approach}}
          
          **Cache Invalidation:** {{cache_management}}
          
          **Optimization Techniques:** {{performance_optimization_methods}}
          
          **Performance Trade-offs:** {{performance_resource_tradeoffs}}

  - id: deployment-architecture
    title: Deployment Architecture
    instruction: |
      Design deployment and operational architecture.
    elicit: true
    sections:
      - id: deployment-strategy
        title: Deployment Strategy
        instruction: |
          Design how the process is deployed and managed:
          
          1. What is the deployment process to AO/Permaweb?
          2. How are different environments (dev, staging, prod) managed?
          3. What rollback and recovery procedures exist?
          4. How are configuration and secrets managed?
        template: |
          **Deployment Process:** {{deployment_workflow}}
          
          **Environment Management:** {{environment_strategy}}
          
          **Rollback Strategy:** {{rollback_procedures}}
          
          **Configuration Management:** {{config_and_secrets_management}}

      - id: monitoring-architecture
        title: Monitoring and Observability
        instruction: |
          Design monitoring and observability based on business success metrics:
          
          1. What metrics need to be tracked for business success?
          2. How is process health and performance monitored?
          3. What alerting and notification systems are needed?
          4. How are issues diagnosed and debugged?
        template: |
          **Business Metrics:** {{business_success_metrics}}
          
          **Technical Monitoring:** {{technical_health_monitoring}}
          
          **Alerting Strategy:** {{alert_and_notification_system}}
          
          **Debugging Tools:** {{diagnostic_and_debugging_tools}}

  - id: testing-architecture
    title: Testing Architecture
    instruction: |
      Design comprehensive testing strategy based on business requirements and risk analysis.
    elicit: true
    sections:
      - id: testing-strategy
        title: Testing Strategy Overview
        instruction: |
          Define overall testing approach:
          
          1. What testing levels are needed (unit, integration, end-to-end)?
          2. How are business acceptance criteria validated through testing?
          3. What test environments and infrastructure are needed?
          4. How is test data managed and generated?
        template: |
          **Testing Levels:** {{testing_level_strategy}}
          
          **Acceptance Criteria Validation:** {{business_requirement_testing}}
          
          **Test Infrastructure:** {{test_environment_architecture}}
          
          **Test Data Management:** {{test_data_strategy}}

      - id: test-specifications
        title: Test Specifications
        instruction: |
          Define specific testing requirements for each major component:
          
          1. What unit tests are needed for each handler?
          2. What integration tests validate inter-process communication?
          3. What performance tests validate scalability requirements?
          4. What security tests validate risk mitigation?
        repeatable: true
        template: |
          **Component:** {{component_name}}
          **Unit Test Requirements:** {{unit_test_specs}}
          **Integration Test Requirements:** {{integration_test_specs}}
          **Performance Test Requirements:** {{performance_test_specs}}
          **Security Test Requirements:** {{security_test_specs}}

  - id: implementation-specifications
    title: Implementation Specifications
    instruction: |
      Provide detailed specifications for developer implementation.
    sections:
      - id: technology-stack
        title: Technology Stack
        type: table
        columns: [Category, Technology, Version, Purpose, Rationale]
        instruction: |
          Define exact technology choices for implementation:
          - AO modules and libraries
          - Development tools and frameworks
          - Testing frameworks
          - Deployment tools
        examples:
          - "| **AO Module** | aos | latest | Core AO functionality | Standard AO development platform |"
          - "| **Testing** | ao-test | latest | Process testing | AO-specific testing utilities |"

      - id: code-organization
        title: Code Organization
        type: code
        language: plaintext
        instruction: |
          Define the recommended code structure for the AO process:
          
          1. How should handler files be organized?
          2. Where should shared utilities and constants be placed?
          3. How should test files be structured?
          4. What naming conventions should be used?
        example: |
          process/
          ├── handlers/
          │   ├── core/           # Core business logic handlers
          │   ├── admin/          # Administrative handlers
          │   └── integration/    # External integration handlers
          ├── lib/
          │   ├── state.lua      # State management utilities
          │   ├── validation.lua # Input validation utilities
          │   └── crypto.lua     # Cryptographic utilities
          ├── tests/
          │   ├── handlers/      # Handler tests
          │   └── integration/   # Integration tests
          ├── config/
          │   └── constants.lua  # Configuration constants
          └── main.lua           # Process entry point

      - id: implementation-guidelines
        title: Implementation Guidelines
        instruction: |
          Provide specific guidance for developers:
          
          1. What coding standards and patterns should be followed?
          2. What error handling patterns should be used?
          3. What security implementation requirements are critical?
          4. What performance considerations must be followed?
        repeatable: true
        template: "- **{{guideline_area}}:** {{implementation_requirement}} - _Architectural Rationale:_ {{rationale}}"

  - id: handoff-requirements
    title: Developer Implementation Handoff
    instruction: |
      Create clear handoff documentation for the developer implementation phase.
    sections:
      - id: implementation-summary
        title: Implementation Requirements Summary
        instruction: |
          Summarize key implementation requirements:
          
          1. Critical architectural components that must be implemented
          2. Required integrations and dependencies
          3. Performance and security implementation requirements
          4. Testing and validation requirements
        template: |
          **Core Components:** {{critical_implementation_components}}
          
          **Required Integrations:** {{integration_implementation_needs}}
          
          **Performance Requirements:** {{performance_implementation_specs}}
          
          **Security Requirements:** {{security_implementation_specs}}
          
          **Testing Requirements:** {{testing_implementation_specs}}

      - id: developer-prompt
        title: Developer Handoff Prompt
        instruction: |
          Create a clear prompt for the developer to begin implementation:
          
          "Based on the technical architecture in this document and the business requirements, please implement the {{project_name}} AO process. Focus on:
          
          1. Implement all handlers according to the handler specifications
          2. Create the state management system as designed in the state architecture
          3. Implement message processing and validation according to the message architecture
          4. Apply all security controls and validation rules as specified
          5. Create comprehensive tests that validate both technical functionality and business acceptance criteria
          6. Deploy the process following the deployment architecture guidelines
          
          Use the AO Process Implementation task and ensure the implementation directly addresses each architectural specification and business requirement."