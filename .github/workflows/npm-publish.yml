name: NPM Package Publishing

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      dry_run:
        description: 'Dry run (no actual publish)'
        required: false
        default: false
        type: boolean

jobs:
  # Comprehensive Package Validation (single job, two Node versions)
  validate-package:
    name: Package Validation & Quality
    runs-on: ubuntu-latest
    outputs:
      validation-result: ${{ steps.validation.outcome }}
    strategy:
      fail-fast: false
      matrix:
        node-version: [20, 22]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-publish-node-${{ matrix.node-version }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-publish-node-${{ matrix.node-version }}-
            ${{ runner.os }}-publish-node-

      - name: Install dependencies
        run: npm ci

      - name: Run comprehensive quality checks
        id: validation
        run: |
          echo "üîç Running comprehensive quality validation..."
          
          # Quality checks (required for publish)
          npm run ci:quality
          
          # Build package
          npm run build
          
          echo "‚úÖ Quality checks completed"

      - name: Validate package structure & permissions
        run: |
          echo "üì¶ Validating package structure..."
          
          # Critical files check
          test -f "bin/permamind.js" || { echo "‚ùå Missing bin/permamind.js"; exit 1; }
          test -f "bin/permamind-setup.js" || { echo "‚ùå Missing bin/permamind-setup.js"; exit 1; }
          test -d "templates" || { echo "‚ùå Missing templates directory"; exit 1; }
          test -d "scripts" || { echo "‚ùå Missing scripts directory"; exit 1; }
          test -d "dist" || { echo "‚ùå Missing dist directory"; exit 1; }
          
          # Executable permissions
          test -x "bin/permamind.js" || { echo "‚ùå bin/permamind.js not executable"; exit 1; }
          test -x "bin/permamind-setup.js" || { echo "‚ùå bin/permamind-setup.js not executable"; exit 1; }
          
          echo "‚úÖ Package structure & permissions validated"

      - name: Test CLI functionality
        run: |
          echo "üñ•Ô∏è Testing CLI functionality..."
          node bin/permamind.js --help
          node bin/permamind.js --version
          node scripts/configure.js list
          echo "‚úÖ CLI functionality validated"

  # Essential Cross-platform Testing (reduced matrix)
  cross-platform-test:
    name: Cross-platform Compatibility
    needs: validate-package
    if: needs.validate-package.outputs.validation-result == 'success'
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest]
        node-version: [20]  # Only LTS for cross-platform
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4  
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install and test
        run: |
          npm ci
          npm run build
          node bin/permamind.js --help
          node bin/permamind.js --version

  npm-publish:
    name: Publish to NPM
    needs: [validate-package, cross-platform-test]
    runs-on: ubuntu-latest
    environment: release
    permissions:
      contents: write
      packages: write
      id-token: write
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')) || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies and build
        run: |
          npm ci
          
          # Clean up old tarballs
          rm -f *.tgz
          git add -A
          if ! git diff --staged --quiet; then
            git commit -m "Clean up old tarball files before version bump"
          fi

      - name: Version bump and build
        if: github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/main'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Ensure we're on the main branch for version bumping
          git checkout main
          git pull origin main
          
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            npm version ${{ github.event.inputs.version_type }}
          else
            npm version patch
          fi
          
          # Push the version commit and tags
          git push origin main
          git push origin --tags
          
          # Build for publishing
          npm run build

      - name: Publish to NPM
        run: |
          if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
            echo "üîç Running dry-run publish..."
            npm publish --dry-run
          else
            echo "üì¶ Publishing to NPM..."
            npm publish
            
            # Quick verification
            PACKAGE_VERSION=$(node -p "require('./package.json').version")
            echo "üîç Verifying published package..."
            sleep 15  # Reduced wait time
            npm view permamind@$PACKAGE_VERSION
            echo "‚úÖ Package published and verified!"
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          NODE_ENV: production

      - name: Create GitHub Release
        if: github.event.inputs.dry_run != 'true' && (github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch')
        run: |
          VERSION=$(node -p "require('./package.json').version")
          TAG_NAME="v$VERSION"
          
          gh release create "$TAG_NAME" \
            --title "Release $VERSION" \
            --notes "## üß† Permamind MCP Server Release

          ### Installation
          \`\`\`bash
          npm install -g permamind
          permamind --setup
          \`\`\`

          ### Features
          - Easy NPM installation with global CLI
          - Automated configuration wizard  
          - Cross-platform support (macOS, Windows, Linux)
          - Integration with Claude Desktop, VS Code, and Cursor
          - Comprehensive AI memory management

          ### What's Changed
          See the [full changelog](https://github.com/ALLiDoizCode/Permamind/compare/main...main) for detailed changes."
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify-success:
    name: Success Notification
    needs: npm-publish
    runs-on: ubuntu-latest
    if: success()
    steps:
      - name: Success notification
        run: |
          echo "üéâ NPM Publishing Pipeline Completed Successfully!"
          echo "üì¶ Package is now available globally via: npm install -g permamind"
          echo "üöÄ Users can now install with simple: permamind --setup"