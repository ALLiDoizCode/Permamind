name: PR Validation (Optimized)

on:
  pull_request:
    branches:
      - development
      - main
    types: [opened, synchronize, reopened, ready_for_review]

env:
  NODE_VERSION: '20'  # Single Node version for PRs
  CI: true
  SEED_PHRASE: 'abandon abandon abandon abandon abandon abandon abandon abandon abandon about'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  # Fast path detection - determine what needs to be tested
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      skip-ci: ${{ steps.check.outputs.skip-ci }}
      has-src-changes: ${{ steps.changes.outputs.src }}
      has-test-changes: ${{ steps.changes.outputs.tests }}
      has-integration-changes: ${{ steps.changes.outputs.integration }}
      test-scope: ${{ steps.scope.outputs.scope }}
    steps:
      - name: Check if CI should be skipped
        id: check
        run: |
          if [ "${{ github.event.pull_request.draft }}" == "true" ] && [ "${{ !contains(github.event.pull_request.title, '[ci]') }}" == "true" ]; then
            echo "skip-ci=true" >> $GITHUB_OUTPUT
            echo "🚫 Skipping CI for draft PR (add [ci] to title to force)"
          else
            echo "skip-ci=false" >> $GITHUB_OUTPUT
          fi

      - name: Checkout code
        if: steps.check.outputs.skip-ci != 'true'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect file changes
        if: steps.check.outputs.skip-ci != 'true'
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            src:
              - 'src/**'
              - 'package.json'
              - 'tsconfig.json'
            tests:
              - 'tests/**'
              - 'vitest.config.ts'
            integration:
              - 'tests/integration/**'
              - 'src/services/**'
              - 'src/tools/**'

      - name: Determine test scope
        id: scope
        if: steps.check.outputs.skip-ci != 'true'
        run: |
          if [ "${{ steps.changes.outputs.integration }}" == "true" ]; then
            echo "scope=integration" >> $GITHUB_OUTPUT
            echo "📊 Will run integration tests"
          elif [ "${{ steps.changes.outputs.src }}" == "true" ] || [ "${{ steps.changes.outputs.tests }}" == "true" ]; then
            echo "scope=unit" >> $GITHUB_OUTPUT
            echo "📊 Will run unit tests only"
          else
            echo "scope=minimal" >> $GITHUB_OUTPUT
            echo "📊 Will run minimal checks only"
          fi

  # TIER 1: Fast Quality Checks (< 2 minutes)
  quick-checks:
    name: Quick Quality Checks
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.skip-ci != 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Linting
        id: lint
        run: |
          echo "🔍 Running linting..."
          npm run lint || {
            echo "::warning::Linting issues detected - please run 'npm run format'"
            exit 0
          }

      - name: Type checking
        id: typecheck
        run: |
          echo "🔍 Running type check..."
          npm run type-check || {
            echo "::error::Type checking failed - must be fixed"
            exit 1
          }

      - name: Build verification
        run: |
          echo "🔨 Building project..."
          npm run build || {
            echo "::error::Build failed - must be fixed"
            exit 1
          }

      - name: Check for debug logs
        run: |
          echo "🔍 Checking for debug logs..."
          if grep -r "console\.log\|debugger\|console\.debug" src/ --exclude-dir=node_modules --exclude="*.test.ts"; then
            echo "::warning::Debug logs found in source code - please remove"
          fi

  # TIER 2: Unit Tests (< 3 minutes)
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: [detect-changes, quick-checks]
    if: |
      needs.detect-changes.outputs.skip-ci != 'true' &&
      (needs.detect-changes.outputs.has-src-changes == 'true' ||
       needs.detect-changes.outputs.has-test-changes == 'true')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        env:
          NODE_ENV: test
        run: |
          echo "🧪 Running unit tests..."
          npm run test tests/unit/ -- --reporter=dot || {
            echo "::error::Unit tests failed"
            exit 1
          }

  # TIER 3: Critical Integration Tests (< 5 minutes)
  integration-tests-critical:
    name: Critical Integration Tests
    runs-on: ubuntu-latest
    needs: [detect-changes, quick-checks]
    if: |
      needs.detect-changes.outputs.skip-ci != 'true' &&
      needs.detect-changes.outputs.test-scope == 'integration'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Run critical integration tests
        env:
          NODE_ENV: test
        timeout-minutes: 10
        run: |
          echo "🔗 Running critical integration tests..."
          # Run only the most critical, fast integration tests
          npm run test \
            tests/integration/media-memory.integration.test.ts \
            tests/integration/ProcessArchitectureAnalysis.integration.test.ts \
            -- --reporter=dot --testTimeout=20000 || {
            echo "::warning::Some integration tests failed - review needed"
            exit 0
          }

  # Security check (parallel with tests)
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.skip-ci != 'true'
    continue-on-error: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Security audit
        run: |
          echo "🔒 Running security audit..."
          npm audit --audit-level high --production || {
            echo "::warning::Security vulnerabilities detected - please review"
            exit 0
          }

  # Platform compatibility (only for significant changes)
  platform-check:
    name: Platform Build Check
    runs-on: ${{ matrix.os }}
    needs: [detect-changes, quick-checks]
    if: |
      needs.detect-changes.outputs.skip-ci != 'true' &&
      needs.detect-changes.outputs.has-src-changes == 'true'
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install and build
        run: |
          npm ci
          npm run build

      - name: Verify CLI
        run: |
          node bin/permamind.js --version
          node bin/permamind.js --help

  # Final status report
  pr-status:
    name: PR Status Report
    runs-on: ubuntu-latest
    needs: [detect-changes, quick-checks, unit-tests, integration-tests-critical, security-audit, platform-check]
    if: always() && needs.detect-changes.outputs.skip-ci != 'true'
    steps:
      - name: Generate status report
        id: status
        run: |
          echo "📊 PR Validation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check results
          FAILED=false
          WARNINGS=false
          
          # Critical checks
          if [ "${{ needs.quick-checks.result }}" != "success" ]; then
            echo "❌ Quick checks: Failed (MUST FIX)" >> $GITHUB_STEP_SUMMARY
            FAILED=true
          else
            echo "✅ Quick checks: Passed" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Unit tests
          if [ "${{ needs.unit-tests.result }}" == "failure" ]; then
            echo "❌ Unit tests: Failed (MUST FIX)" >> $GITHUB_STEP_SUMMARY
            FAILED=true
          elif [ "${{ needs.unit-tests.result }}" == "skipped" ]; then
            echo "⏭️ Unit tests: Skipped (no changes)" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ Unit tests: Passed" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Integration tests
          if [ "${{ needs.integration-tests-critical.result }}" == "failure" ]; then
            echo "⚠️ Integration tests: Issues detected (review needed)" >> $GITHUB_STEP_SUMMARY
            WARNINGS=true
          elif [ "${{ needs.integration-tests-critical.result }}" == "skipped" ]; then
            echo "⏭️ Integration tests: Skipped (no integration changes)" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ Integration tests: Passed" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Security
          if [ "${{ needs.security-audit.result }}" == "failure" ]; then
            echo "⚠️ Security audit: Vulnerabilities detected" >> $GITHUB_STEP_SUMMARY
            WARNINGS=true
          else
            echo "✅ Security audit: Clean" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Platform compatibility
          if [ "${{ needs.platform-check.result }}" == "failure" ]; then
            echo "⚠️ Platform compatibility: Issues on some platforms" >> $GITHUB_STEP_SUMMARY
            WARNINGS=true
          elif [ "${{ needs.platform-check.result }}" == "skipped" ]; then
            echo "⏭️ Platform checks: Skipped (no src changes)" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ Platform compatibility: All platforms OK" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "$FAILED" = "true" ]; then
            echo "## ❌ PR has blocking issues that must be fixed" >> $GITHUB_STEP_SUMMARY
            echo "status=failed" >> $GITHUB_OUTPUT
            exit 1
          elif [ "$WARNINGS" = "true" ]; then
            echo "## ⚠️ PR can proceed but has warnings to review" >> $GITHUB_STEP_SUMMARY
            echo "status=warning" >> $GITHUB_OUTPUT
          else
            echo "## ✅ PR validation passed!" >> $GITHUB_STEP_SUMMARY
            echo "status=success" >> $GITHUB_OUTPUT
          fi

      - name: Post PR comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const status = '${{ steps.status.outputs.status }}';
            let emoji, title, body;
            
            if (status === 'failed') {
              emoji = '❌';
              title = 'PR Validation Failed';
              body = 'This PR has blocking issues that must be fixed before merge.\n\nCheck the workflow summary for details.';
            } else if (status === 'warning') {
              emoji = '⚠️';
              title = 'PR Validation Passed with Warnings';
              body = 'This PR can proceed but has some warnings that should be reviewed.\n\nCheck the workflow summary for details.';
            } else {
              emoji = '✅';
              title = 'PR Validation Passed';
              body = 'All automated checks passed successfully!\n\n🚀 This PR is ready for code review.';
            }
            
            // Find and update existing comment or create new one
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('PR Validation')
            );
            
            const commentBody = `${emoji} **${title}**\n\n${body}\n\n---\n🤖 *Automated PR validation (optimized pipeline)*`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody,
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody,
              });
            }