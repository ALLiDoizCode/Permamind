name: PR Validation Pipeline

on:
  pull_request:
    branches:
      - development
      - main
    types: [opened, synchronize, reopened, ready_for_review]
  pull_request_review:
    types: [submitted]

env:
  NODE_VERSION: '20'
  CI: true

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  # Skip CI for draft PRs unless explicitly requested
  check-skip:
    runs-on: ubuntu-latest
    outputs:
      skip-ci: ${{ steps.check.outputs.skip-ci }}
    steps:
      - name: Check if CI should be skipped
        id: check
        run: |
          if [ "${{ github.event.pull_request.draft }}" == "true" ] && [ "${{ contains(github.event.pull_request.title, '[ci]') }}" == "false" ]; then
            echo "skip-ci=true" >> $GITHUB_OUTPUT
            echo "Skipping CI for draft PR (add [ci] to title to force run)"
          else
            echo "skip-ci=false" >> $GITHUB_OUTPUT
          fi

  # Code Quality and Security Checks
  quality-checks:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    needs: check-skip
    if: needs.check-skip.outputs.skip-ci != 'true'
    strategy:
      matrix:
        node-version: [20, 22]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint
        continue-on-error: ${{ matrix.node-version != env.NODE_VERSION }}

      - name: Run type checking
        run: npm run type-check

      - name: Security audit
        run: npm run audit
        continue-on-error: ${{ matrix.node-version != env.NODE_VERSION }}

      - name: Check for debug logs
        run: |
          echo "üîç Checking for debug logs..."
          if grep -r "console\.log\|debugger\|console\.debug" src/ --exclude-dir=node_modules; then
            echo "‚ùå Debug logs found in source code"
            exit 1
          fi
          echo "‚úÖ No debug logs found"

      - name: Dependency vulnerability scan
        run: |
          echo "üîç Scanning dependencies for vulnerabilities..."
          npm audit --audit-level high --production
          echo "‚úÖ Dependency scan completed"

  # Comprehensive Testing Suite
  test-suite:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: check-skip
    if: needs.check-skip.outputs.skip-ci != 'true'
    strategy:
      matrix:
        node-version: [20, 22]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test

      - name: Run integration tests
        run: npm run test:coverage

      - name: Upload coverage reports
        if: matrix.node-version == env.NODE_VERSION
        uses: codecov/codecov-action@v4
        with:
          fail_ci_if_error: false
          verbose: true

      - name: Coverage threshold check
        if: matrix.node-version == env.NODE_VERSION
        run: |
          echo "üîç Checking coverage thresholds..."
          # Extract coverage percentages from vitest coverage
          if [ -f "coverage/coverage-summary.json" ]; then
            LINES=$(node -p "JSON.parse(require('fs').readFileSync('coverage/coverage-summary.json', 'utf8')).total.lines.pct")
            FUNCTIONS=$(node -p "JSON.parse(require('fs').readFileSync('coverage/coverage-summary.json', 'utf8')).total.functions.pct")
            BRANCHES=$(node -p "JSON.parse(require('fs').readFileSync('coverage/coverage-summary.json', 'utf8')).total.branches.pct")
            
            echo "Coverage: Lines: $LINES%, Functions: $FUNCTIONS%, Branches: $BRANCHES%"
            
            if (( $(echo "$LINES < 85" | bc -l) )); then
              echo "‚ùå Line coverage ($LINES%) below threshold (85%)"
              exit 1
            fi
            
            if (( $(echo "$FUNCTIONS < 90" | bc -l) )); then
              echo "‚ùå Function coverage ($FUNCTIONS%) below threshold (90%)"
              exit 1
            fi
            
            echo "‚úÖ Coverage thresholds met"
          else
            echo "‚ö†Ô∏è Coverage summary not found, skipping threshold check"
          fi

  # Cross-platform Build Testing
  cross-platform-build:
    name: Cross-platform Build
    needs: check-skip
    if: needs.check-skip.outputs.skip-ci != 'true'
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [20, 22]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Test CLI functionality
        run: |
          node bin/permamind.js --help
          node bin/permamind.js --version

      - name: Test package structure
        shell: bash
        run: |
          echo "üîç Validating build output..."
          
          # Check critical files exist
          if [ ! -d "dist" ]; then
            echo "‚ùå Missing dist directory"
            exit 1
          fi
          
          if [ ! -f "bin/permamind.js" ]; then
            echo "‚ùå Missing bin/permamind.js"
            exit 1
          fi
          
          if [ ! -f "bin/permamind-setup.js" ]; then
            echo "‚ùå Missing bin/permamind-setup.js"
            exit 1
          fi
          
          echo "‚úÖ Build validation passed"

  # Performance and Bundle Analysis
  performance-check:
    name: Performance Analysis
    runs-on: ubuntu-latest
    needs: check-skip
    if: needs.check-skip.outputs.skip-ci != 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Bundle size analysis
        run: |
          echo "üîç Analyzing bundle size..."
          
          # Check dist directory size
          DIST_SIZE=$(du -sh dist/ | cut -f1)
          echo "Total dist size: $DIST_SIZE"
          
          # Check individual file sizes
          find dist/ -name "*.js" -exec wc -c {} + | sort -n
          
          echo "‚úÖ Bundle analysis completed"

      - name: Startup time test
        run: |
          echo "üöÄ Testing CLI startup time..."
          
          # Measure time to show help
          time timeout 30s node bin/permamind.js --help > /dev/null
          
          echo "‚úÖ Startup time test completed"

  # Integration and Contract Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [quality-checks, test-suite]
    if: needs.check-skip.outputs.skip-ci != 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Run integration tests
        run: |
          echo "üîó Running integration tests..."
          
          # Test MCP server initialization
          timeout 10s npm run start &
          SERVER_PID=$!
          sleep 5
          
          if kill -0 $SERVER_PID 2>/dev/null; then
            echo "‚úÖ MCP server starts successfully"
            kill $SERVER_PID
          else
            echo "‚ùå MCP server failed to start"
            exit 1
          fi

      - name: Package installation test
        run: |
          echo "üì¶ Testing package installation..."
          
          # Create test package
          npm pack --silent
          TARBALL=$(ls permamind-*.tgz)
          
          # Test in temporary directory
          mkdir -p /tmp/package-test
          cd /tmp/package-test
          npm init -y
          npm install "${{ github.workspace }}/$TARBALL"
          
          echo "‚úÖ Package installation test passed"

  # Final PR Status Check
  pr-validation-status:
    name: PR Validation Status
    runs-on: ubuntu-latest
    needs: [quality-checks, test-suite, cross-platform-build, performance-check, integration-tests]
    if: always() && needs.check-skip.outputs.skip-ci != 'true'
    steps:
      - name: Check all jobs status
        run: |
          echo "üîç Checking overall PR validation status..."
          
          # Check if any required jobs failed
          if [ "${{ needs.quality-checks.result }}" != "success" ] || \
             [ "${{ needs.test-suite.result }}" != "success" ] || \
             [ "${{ needs.cross-platform-build.result }}" != "success" ] || \
             [ "${{ needs.performance-check.result }}" != "success" ] || \
             [ "${{ needs.integration-tests.result }}" != "success" ]; then
            echo "‚ùå PR validation failed - check individual job results"
            exit 1
          fi
          
          echo "‚úÖ All PR validation checks passed!"
          echo "üöÄ PR is ready for review and merge"

      - name: Post success comment
        if: success() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '‚úÖ **PR Validation Passed!**\n\nüéâ All automated checks have passed successfully. This PR is ready for code review.\n\n**Validation Summary:**\n- ‚úÖ Code quality and linting\n- ‚úÖ Type checking\n- ‚úÖ Security audit\n- ‚úÖ Test suite (unit & integration)\n- ‚úÖ Cross-platform build\n- ‚úÖ Performance analysis\n- ‚úÖ Package validation'
            })

      - name: Post failure comment
        if: failure() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '‚ùå **PR Validation Failed**\n\nSome automated checks have failed. Please review the workflow results and fix any issues.\n\nüìã **Next Steps:**\n1. Check the failed job logs in the Actions tab\n2. Fix any identified issues\n3. Push your changes to trigger a new validation run\n\nüí° **Tip:** You can add `[ci]` to your PR title to force CI runs on draft PRs.'
            })