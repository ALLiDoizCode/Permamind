name: PR Validation Pipeline

on:
  pull_request:
    branches:
      - development
      - main
    types: [opened, synchronize, reopened, ready_for_review]
  pull_request_review:
    types: [submitted]

env:
  NODE_VERSION: '20'
  CI: true
  SEED_PHRASE: 'abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon about'  # Test seed phrase for CI

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  # Skip CI for draft PRs unless explicitly requested
  check-skip:
    runs-on: ubuntu-latest
    outputs:
      skip-ci: ${{ steps.check.outputs.skip-ci }}
    steps:
      - name: Check if CI should be skipped
        id: check
        run: |
          if [ "${{ github.event.pull_request.draft }}" == "true" ] && [ "${{ contains(github.event.pull_request.title, '[ci]') }}" == "false" ]; then
            echo "skip-ci=true" >> $GITHUB_OUTPUT
            echo "Skipping CI for draft PR (add [ci] to title to force run)"
          else
            echo "skip-ci=false" >> $GITHUB_OUTPUT
          fi

  # Combined Code Quality, Security, and Testing
  code-validation:
    name: Code Quality & Tests
    runs-on: ubuntu-latest
    needs: check-skip
    if: needs.check-skip.outputs.skip-ci != 'true'
    outputs:
      quality-result: ${{ steps.quality.outcome }}
      test-result: ${{ steps.tests.outcome }}
    strategy:
      fail-fast: false
      matrix:
        node-version: [20, 22]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Quality checks
        id: quality
        run: |
          echo "üîç Running quality checks..."
          
          # Run linting (continue on failure to gather all issues)
          if ! npm run lint; then
            echo "‚ö†Ô∏è Linting issues detected"
          fi
          
          # Run type checking
          if ! npm run type-check; then
            echo "‚ö†Ô∏è Type checking issues detected"
          fi
          
          # Security audit
          if ! npm run audit; then
            echo "‚ö†Ô∏è Security audit issues detected"
          fi
          
          # Check for debug logs
          if grep -r "console\.log\|debugger\|console\.debug" src/ --exclude-dir=node_modules 2>/dev/null; then
            echo "‚ö†Ô∏è Debug logs found in source code"
          else
            echo "‚úÖ No debug logs found"
          fi
          
          # Dependency vulnerability scan
          if ! npm audit --audit-level high --production; then
            echo "‚ö†Ô∏è High-severity vulnerabilities detected"
          fi

      - name: Run tests with coverage
        id: tests
        env:
          NODE_ENV: test
        run: |
          echo "üß™ Running test suite..."
          
          # Run tests with coverage
          if ! npm run test:coverage; then
            echo "‚ö†Ô∏è Test failures detected"
            exit 0  # Don't fail the job, just mark the step as failed
          fi
          
          echo "‚úÖ All tests passed"

      - name: Upload coverage reports
        if: matrix.node-version == env.NODE_VERSION
        uses: codecov/codecov-action@v4
        with:
          fail_ci_if_error: false
          verbose: true

      - name: Coverage threshold validation
        if: matrix.node-version == env.NODE_VERSION
        run: |
          echo "üìä Validating coverage thresholds..."
          if [ -f "coverage/coverage-summary.json" ]; then
            LINES=$(node -p "JSON.parse(require('fs').readFileSync('coverage/coverage-summary.json', 'utf8')).total.lines.pct" 2>/dev/null || echo "0")
            FUNCTIONS=$(node -p "JSON.parse(require('fs').readFileSync('coverage/coverage-summary.json', 'utf8')).total.functions.pct" 2>/dev/null || echo "0")
            BRANCHES=$(node -p "JSON.parse(require('fs').readFileSync('coverage/coverage-summary.json', 'utf8')).total.branches.pct" 2>/dev/null || echo "0")
            
            echo "üìà Coverage: Lines: $LINES%, Functions: $FUNCTIONS%, Branches: $BRANCHES%"
            
            # Warning thresholds (non-blocking)
            if (( $(echo "$LINES < 85" | bc -l 2>/dev/null || echo "1") )); then
              echo "‚ö†Ô∏è Line coverage ($LINES%) below target (85%)"
            fi
            if (( $(echo "$FUNCTIONS < 90" | bc -l 2>/dev/null || echo "1") )); then
              echo "‚ö†Ô∏è Function coverage ($FUNCTIONS%) below target (90%)"
            fi
          else
            echo "‚ö†Ô∏è Coverage summary not found"
          fi

  # Essential Build Validation (Ubuntu only for PRs)
  build-validation:
    name: Build & CLI Tests
    runs-on: ubuntu-latest
    needs: check-skip
    if: needs.check-skip.outputs.skip-ci != 'true'
    strategy:
      fail-fast: false
      matrix:
        node-version: [20, 22]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Validate build output
        run: |
          echo "üîç Validating build structure..."
          
          # Critical files check
          test -d "dist" || { echo "‚ùå Missing dist directory"; exit 1; }
          test -f "bin/permamind.js" || { echo "‚ùå Missing bin/permamind.js"; exit 1; }
          test -f "bin/permamind-setup.js" || { echo "‚ùå Missing bin/permamind-setup.js"; exit 1; }
          test -f "dist/server.js" || { echo "‚ùå Missing dist/server.js"; exit 1; }
          
          echo "‚úÖ Build structure valid"

      - name: Test CLI functionality
        run: |
          echo "üñ•Ô∏è Testing CLI commands..."
          node bin/permamind.js --help
          node bin/permamind.js --version

      - name: Test core module loading
        run: |
          echo "üì¶ Testing module loading..."
          node -e "import('./dist/constants.js').then(() => console.log('‚úÖ Core modules load successfully')).catch(e => { console.error('‚ùå Module loading failed:', e.message); process.exit(1); })"

  # Cross-platform testing (only on main branch or release PRs)
  cross-platform-build:
    name: Cross-platform Validation
    needs: [check-skip, build-validation]
    if: needs.check-skip.outputs.skip-ci != 'true' && (github.base_ref == 'main' || contains(github.event.pull_request.title, '[cross-platform]'))
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest]
        node-version: [20]  # Only test LTS on other platforms
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build and test
        run: |
          npm run build
          node bin/permamind.js --help
          node bin/permamind.js --version

  # Final PR Status Check
  pr-validation-status:
    name: PR Validation Status
    runs-on: ubuntu-latest
    needs: [code-validation, build-validation, cross-platform-build]
    if: always() && needs.check-skip.outputs.skip-ci != 'true'
    steps:
      - name: Check validation status
        run: |
          echo "üîç Evaluating PR validation results..."
          
          # Check critical jobs
          CRITICAL_FAILURE=false
          
          # Build validation must pass
          if [ "${{ needs.build-validation.result }}" != "success" ]; then
            echo "‚ùå Critical failure: Build validation failed"
            CRITICAL_FAILURE=true
          fi
          
          # Code validation issues are warnings, not blockers
          if [ "${{ needs.code-validation.result }}" != "success" ]; then
            echo "‚ö†Ô∏è Code quality or test issues detected - please review"
          fi
          
          # Cross-platform is optional
          if [ "${{ needs.cross-platform-build.result }}" == "failure" ]; then
            echo "‚ö†Ô∏è Cross-platform build issues detected"
          elif [ "${{ needs.cross-platform-build.result }}" == "skipped" ]; then
            echo "‚ÑπÔ∏è Cross-platform testing skipped (add [cross-platform] to title to enable)"
          fi
          
          if [ "$CRITICAL_FAILURE" = "true" ]; then
            echo "‚ùå PR has critical build failures that must be fixed"
            exit 1
          fi
          
          echo "‚úÖ PR validation completed - critical checks passed!"
          echo "üöÄ PR is ready for review"

      - name: Post success comment
        if: success() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const codeResult = '${{ needs.code-validation.result }}';
            const buildResult = '${{ needs.build-validation.result }}';
            const crossPlatformResult = '${{ needs.cross-platform-build.result }}';
            
            let body = '‚úÖ **PR Validation Completed!**\n\n';
            body += 'üéâ Critical automated checks have passed successfully. This PR is ready for code review.\n\n';
            body += '**Validation Summary:**\n';
            body += `- ${codeResult === 'success' ? '‚úÖ' : '‚ö†Ô∏è'} Code quality & testing\n`;
            body += `- ${buildResult === 'success' ? '‚úÖ' : '‚ùå'} Build & CLI validation\n`;
            
            if (crossPlatformResult === 'success') {
              body += '- ‚úÖ Cross-platform compatibility\n';
            } else if (crossPlatformResult === 'skipped') {
              body += '- ‚è≠Ô∏è Cross-platform testing (skipped)\n';
            } else if (crossPlatformResult === 'failure') {
              body += '- ‚ö†Ô∏è Cross-platform compatibility\n';
            }
            
            if (codeResult !== 'success') {
              body += '\n‚ö†Ô∏è **Note:** Some non-critical issues detected. Please review the workflow logs and address warnings as needed.';
            }
            
            if (crossPlatformResult === 'skipped') {
              body += '\n\nüí° **Tip:** Add `[cross-platform]` to your PR title to run cross-platform tests.';
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

      - name: Post failure comment
        if: failure() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '‚ùå **PR Validation Failed**\n\nCritical automated checks have failed. Please review and fix the issues before merging.\n\nüìã **Next Steps:**\n1. Check the failed job logs in the Actions tab\n2. Fix any build or critical validation issues\n3. Push your changes to trigger a new validation run\n\nüí° **Tips:**\n- Add `[ci]` to your PR title to force CI runs on draft PRs\n- Add `[cross-platform]` to test on Windows/macOS\n- Quality/test warnings are non-blocking but should be addressed'
            })