name: Setup Branch Protection Rules
on:
  workflow_dispatch:
    inputs:
      dry_run:
        description: "Dry run mode (preview changes without applying)"
        required: false
        default: "true"
        type: choice
        options:
          - "true"
          - "false"

jobs:
  setup-protection:
    runs-on: ubuntu-latest
    name: Configure TDD Branch Protection
    permissions:
      contents: read
      administration: write
    steps:
      - name: Setup Branch Protection Rules
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const dryRun = '${{ inputs.dry_run }}' === 'true';
            
            console.log(`🔒 Setting up TDD branch protection for ${owner}/${repo}`);
            console.log(`📋 Dry run mode: ${dryRun ? 'ON' : 'OFF'}`);
            
            const protectionRules = {
              required_status_checks: {
                strict: true,
                checks: [
                  { context: "TDD Quality Gate", app_id: -1 },
                  { context: "Unit Tests (TDD Red-Green)", app_id: -1 },
                  { context: "Integration Tests (TDD Refactor)", app_id: -1 }
                ]
              },
              enforce_admins: false,
              required_pull_request_reviews: {
                required_approving_review_count: 1,
                dismiss_stale_reviews: true,
                require_code_owner_reviews: false,
                require_last_push_approval: true
              },
              restrictions: null,
              allow_force_pushes: false,
              allow_deletions: false,
              block_creations: false,
              required_conversation_resolution: true,
              lock_branch: false,
              allow_fork_syncing: true
            };
            
            if (dryRun) {
              console.log('🔍 DRY RUN: Would apply these protection rules to main branch:');
              console.log(JSON.stringify(protectionRules, null, 2));
              console.log('\n✅ TDD Compliance Features:');
              console.log('  - Required status checks for all TDD phases');
              console.log('  - Mandatory PR reviews');
              console.log('  - Conversation resolution required');
              console.log('  - Force push protection');
              console.log('  - Branch deletion protection');
              console.log('\n🎯 Quality Gates:');
              console.log('  - TDD Quality Gate (linting, coverage, audit)');
              console.log('  - Unit Tests (Red-Green phase verification)');
              console.log('  - Integration Tests (Refactor phase verification)');
            } else {
              try {
                await github.rest.repos.updateBranchProtection({
                  owner,
                  repo,
                  branch: 'main',
                  ...protectionRules
                });
                console.log('✅ Branch protection rules applied successfully!');
                console.log('🛡️ Main branch is now protected with TDD compliance requirements');
              } catch (error) {
                console.error('❌ Failed to apply branch protection rules:', error.message);
                throw error;
              }
            }

      - name: Create CODEOWNERS file
        if: inputs.dry_run == 'false'
        run: |
          echo "Creating CODEOWNERS file for AI memory components..."
          mkdir -p .github
          cat > .github/CODEOWNERS << 'EOF'
          # AI Memory Layer Components
          /src/services/aiMemoryService.ts @ALLiDoizCode
          /src/models/AIMemory.ts @ALLiDoizCode
          /tests/unit/services/ @ALLiDoizCode
          /tests/integration/ @ALLiDoizCode
          
          # TDD Workflow Configuration
          /.github/workflows/ @ALLiDoizCode
          /vitest*.config.ts @ALLiDoizCode
          
          # Core MCP Server
          /src/server.ts @ALLiDoizCode
          /package.json @ALLiDoizCode
          EOF
          
          echo "✅ CODEOWNERS file created"

      - name: Summary
        run: |
          echo "## 🎉 TDD Branch Protection Setup Complete"
          echo ""
          echo "### 🔒 Protection Features Applied:"
          echo "- ✅ Required TDD quality checks before merge"
          echo "- ✅ Mandatory code review (1 approver)"
          echo "- ✅ Conversation resolution required"
          echo "- ✅ Force push and deletion protection"
          echo "- ✅ CODEOWNERS for AI memory components"
          echo ""
          echo "### 🧪 TDD Workflow Status Checks:"
          echo "1. **TDD Quality Gate**: Linting, type checking, coverage ≥85%, security audit"
          echo "2. **Unit Tests**: Red-Green phase verification"  
          echo "3. **Integration Tests**: Refactor phase verification"
          echo ""
          echo "### 🚀 Next Steps:"
          echo "- Create feature branches with TDD naming: \`feature/\`, \`ai-memory/\`, \`tdd/\`"
          echo "- Auto-PR creation triggers when all quality checks pass"
          echo "- Main branch releases include comprehensive TDD metrics"
          echo ""
          echo "**🧠 AI Memory Layer is now protected with enterprise-grade TDD compliance!**